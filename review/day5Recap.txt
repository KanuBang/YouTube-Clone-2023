1. try-catch문으로 에러처리
에러가 발생하면 try에서 코드를 멈추고 catch로 넘어간다.
에러가 없다면 catch는 암것도 안 함.

2. 데이터 형태를 저장할때 Date.now가 아닌 Date.now()를 한 이유는

데이터 형태를 저장할 때
Date.now()를 한다면 데이터 형태를 저장할 때 그때 시간이 저장된다.
그렇기에 데이터 형태를 저장할 때는 Date.now를 한다.

즉, 이렇게 하는 이유는 몽구스에게 내가 새로운 비디오를 생성했을때 그 시간을 저장하겠다고 알리는 것이다

3. 구체적인 데이터 형태들
1) required: true or false => 필수 입력 여부 => 왜 쓸까?
a라는 데이터의 형태를 required를 설정하지 않고 저장한다면
a의 값을 저장할때 a를 빼먹어도 에러가 발생하지 않는다.

이런 것을 바지하기 위해 required를 쓴다.

2) default: value는 왜 쓸까?

예를 들어서 한국 비디오에는 다 노란색깔 배경을 입힌다고 해보자.
데이터를 실제로 저장할때 color: yellow를 하는 것 보다
아예 데이터 형태를 저장할 때 color : {default: yellow} 하는 것이
code management 효율성 그리고 코드 양을 줄이는 측면에서 효율적이다.

3) error._message는 왜 쓸까?
try-catch 문에서 에러가 발생했을때 
에러의 메시지는 error._message로부터 알 수 있다.
error는 catch문에서 받는 변수다.
이름만 error이기에 다른 이름으로 바뀔 수 있다.

______________________________________________________________________________________
1. trim: true or false 는 왜 쓸까>

trim은 문자열의 양옆 공백을 짜르는 역할을 한다.

2. minLength, maxLength 는 html에 쓸까? 백엔드에 쓸까?

둘 다 쓰자. 각자의 목적이 있다.

html에서의 글자 제한은 유저와의 원활한 소통을 위해서이다.
만약 백엔드에서 글자 제한을 뒀는데 유저가 이 사실을 모른다면 
왜 에러가 발생하는지 이해를 못 할 것이다.
그래서 html에 글자 제한이 필요하다.

백엔드에 글자 제한을 쓰는 것은 db의 데이터 형태를 저장하기 위함이다.

3. 우리가 데이터를 저장하면 몽구스는 데이터 별로 id를 부여한다.

4. uppercase: true는 내가 소문자로 적어도 몽구스가 대문자로 바꿔준다.

______________________________________________________________________________________

1. 몽구스가 각 데이터에 부여하는 id는
24바이트 16진수이다.

2. findById는 id로 데이터를 찾는 거다.

3. findById를 이용해서 id로 데이터를 찾기 위해서는 url에 16진수 정규식이 필요하다.

4. [0-9a-f]{24}
0부터9 그리고 a부터 f까지의 24자 string을 찾아내자

______________________________________________________________________________________

1. 에러체크를 if로 먼저 하는 이유
에러체크를 먼저 하면 다른 코드는 에러 걱정할 필요가 없음

2. 에러체크를 if로 할 때 주의점
에러를 처리하는 if문에서는 return을 해서 바로 함수를 종료시켜야 한다. 그래야지 정상 코드가 실행되기 전에 함수가 끝난다

3. startsWith('x') 쓰는 이유
배열에서 'x'로 시작하는 것을 찾을 수 있다.

4. model.findById(id) 쓰는 이유
id로 내가 원하는 데이터를 찾을 수 있다.

-> ID가 아니라 Id다.

5. DB에 요청하고 응답 받는 것은 콜백이므로 async await처리하자

______________________________________________________________________________________

1. findOneAndUpdate vs findById
findOneAndUpdate 는 어떤 조건이든 지정할 수 있다. 
하지만, findById는 무조건 조건이 id다

2. findByIdUpdate(id, {업데이트할 내용})

3. exits를 쓰는 이유
find나 finById는 비디오를 가져오지만
exist는 filter에서 따라서 그 데이터가 존재하는지만 체크한다,

4. _id는 몽구스에서 지정한 id다.

5. 몽구스의 미들웨어는 document에 무슨 일이 생기기전 이나 후에 미들웨어에 적용할 수 있다.
schema.pre로 미들웨어를 사용할 수 있다.

6. 미들웨어는 스키마를 만들고 모델을 만들기 전 그 사이에 있어야 한다.

7.
videoSchema.pre("save", async function ( )
{
    this.hashtags = this.hashtags[0]
      .split(",")
      .map((word) => (word.startsWith("#") ? word:`#${word}`))
}

)
=> save 이벤트가 발생하면 해쉬태그 처리를 하고 저장하겠다. 라는 의미다.
이전까지는 컨트롤러에서 처리했던 것을 미들웨어로 처리했다.

const Video = mongoose.model("Video", videoSchema)


______________________________________________________________________________________

0. 즉, 미들웨어는 어떤 이벤트가 발생하면 
갑자기 끼어들어서 그 이벤트가 발생했을때 할일을처리하고 
조용히 사라진다

1. findOneAndUpdate을 쓰지 않는 이유
save hook을 처리 할 수 없다
this로 문서에 접근할 수 없다.

2. video.find 처럼 모델에 메소드를 만들 수 있게 해주는 것이 static이다.

videoSchema.static("functionName", function( ) {

})

______________________________________________________________________________________

1. 데이터를 지울때는 model.findByIdAndDelete(id)를 쓰자.

이거의 동의어는 findIneAndDelete({_id:id})

2. findByIdAndRemove와 findByIdAndRemove의 차이점. 그냥 delete 쓰래
이유도 설명 안 해주심

______________________________________________________________________________________
1. search는 GET 요청을 신청한다.
2. 요청이 get일 때 url로 받은 내용은 req.query로 받는다.
3. 요청이 poast일 때 input으로 받은 내용은 req.body
4. 라우터에서 url에 변수 값으로 설정한 내영 req.params
라우터로 지정한 :id -> req.params
pug파일에서 input으로 받은 내용 -> req.body(form이 POST일 때)
pug파일에서 input으로 받은 url내용 -> req.query (form이 GET일 때)

5. .sort({정렬조건})


______________________________________________________________________________________

1.몽고DB regex ($regex)
몽고DB에서 정규표현식을 사용하기 위해 사용하는 키워드
쿼리의 패턴 일치 문자열에 대한 정규식 기능을 제공합니다.

2. RegExp 생성자는 패턴을 사용해 텍스트를 판별할 때 사용합니다.

3.

RegExp 사용 방법
RegExp 객체는 리터럴 표기법과 생성자로써 생성할 수 있습니다.
리터럴 표기법의 매개변수는 두 빗금으로 감싸야 하며 따옴표를 사용하지 않습니다.
생성자 함수의 매개변수는 빗금으로 감싸지 않으나 따옴표를 사용합니다.
```
/ab+c/i 를 아래 RegExp 생성자를 이용해서 만들 수 있습니다.
new RegExp(/ab+c/, 'i') // 리터럴 표기법
new RegExp('ab+c', 'i') // 생성자 함수

4

videos title을 검색할때 keyword가 포함된것들을 regex operator를 통해 검색해 줄 수 있다.
(regex = regular expression의 약자)
const { keyword } = req.query;
.
.
$regex: new RegExp(keyword, "i") -> keyword가 포함된 것들을 검색.
$regex: new RegExp(`^${keyword}`, "i") -> keyword로 시작되는 것들을 검색.
$regex: new RegExp(`${keyword}$`, "i") -> keyword로 끝나는 것들을 검색.
(여기서 "i" = Welcome,welcome 둘다 같게 해주는것 즉 lowercase,uppercase의 구분을 없게 해주는것)
( mongoose가 아닌 mongoDB가 해주는 기능이다)


5. 즉 결론을 내리자면
title: { $regex: } => 몽고DB에서 정규식을 쓰겠다

  title: {
          $regex: new RegExp(`${keyword}$`,"i")
    } => 생성자을 이용해 정규 표현식을 쓰겠다
      =>keyword로 끝나는 말 + uppercase 무시하겠다

6. 다시 한번 결론을 내리자면

 videos = await Video.find({
        title: {
          $regex: new RegExp(`${keyword}$`,"i")
        }
      })


      몽고DB에서 정규 표현식을 이용할 거고
      keyword에서 내가 설정한 정규 표현식이 title과 일치하는게 있다면
      몽고 DB에서 가져와서 videos에 넣어라

