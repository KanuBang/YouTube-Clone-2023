1) Upload Video로 이동 => videos/upload"
2) video 라우터 catch후 /upload 라우터로 이동
3) protectorMiddlewre 작동
4) get 요청이므로 getUpload 컨트롤러 작동
5) getUpload 컨트롤러는 upload.pug 렌더링

6) upload.pug에서는 비디오 파일을 업로드 할 것이므로  multer 미들웨어를 써야함
7) 그래서 enctpye ="multipart-form:으로 설정
8) 비디오 업로드 후 제출을 함
9) action 주소가 /videos/upload 이것 이므로 이 주소로 POST 요청

10) video라우터 작동 후 /upload catch
11) POST 처리로 이동
12) POST 처리 첫 번째는 videoUpload multer 미들웨어임
13) 이곳에서 유저가 업로드된 비디오를 서버에 주소로 저장
14) 파일 용량도 한정함

15) 그후 다시 POST로 돌아와서 postUpload 컨트롤러 작동
16) postUpload 컨트롤러에서 파일 경로를 저장
17) 브라우저는 express.static("/uploads") 덕분에 upload파일에 자유롭게 접근 가능

________________________________________________________________________

1) a(href=`/users/${loggedInUser._id}`) My Profile를
base.pug에 추가한다.

2) 그러면 user 라우터 userRouter.get("/:id", see)가
see 컨트롤러를 실행시킨다.

3) see 컨트롤러에서는 
const {id} = req.params로 url에 있는 유저의 id를 빼온다.

4) 빼온 user id로 데이터베이스에서 그 user가 있는지 찾는다.
const user = await User.findById(id)

5) 만약 그 user가 없다면 404 pug로 user not found를 알리고

6) 망갹 user가 있다면
 return res.render("users/profile", {
        pageTitle: user.name,
        user:user
    })

로 프로필 페이지를 렌더링 한다.

7) 이 프로필 페이지는 인스타 프로필처럼 public이다.

________________________________________________________________________

삽질 재데로 한 파트...

1. Video 스키마 비디오 영상 소유자의 id를 넣었음.
여기서 ObjectId는 mongoose가 제공하는 type임.
JS가 제공하는 타입은 String,Number 같은 거고

2. postUpload 컨트롤러에서 영상 업로드 할때
세션 에서 유저 아이디 뽑아와서 영상을 DB에 저장할때 같이 owner에 저장시킴

3. 그리고 watch 컨트롤러에서 watch.pug 랜더링할때
video(볼 비디오), owner(video의 owner) 정보 같이 보내버림

4. 그리고 watch.pug에서 로그인 된 유저와 영상 소유주가 같은 지 안 같은지를 판단해서
edit video 같은 거 보일지 말지 결정함

# 내가 한 삽질: 로그인 안 한 상태에서 watch.pug를 함
로그인 안 한 상태에서는 loggedInUser가 없음.
그래서 계속 에러가 떳음

# 내가 한 삽질: video.js 파일을 Video.js로 바꾸고 import 경로도 다 Video로 수정했더닌
model overwrite error가 뜸
아직도 원인을 모르겠음.

스키마 파일은 왠만해서 다시 건드리지 말자.