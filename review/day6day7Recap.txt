abc
gdrffg@gmail.com
chan
qwer1234
seoul

1.$or => 배열에서 or 연산을 실행한다.

The $or operator performs a logical OR operation 
on an array of one or more <expressions> and selects the documents 
that satisfy at least one of the <expressions>. 
The $or has the following syntax:
{ $or: [ { <expression1> }, { <expression2> }, ... , { <expressionN> } ] }

2. 작업 내용
패스워드 확인, 이메일 or 유저네임 존재 여부를 몽고 DB에서 체크한다.
만약 패스워드 확인이 일치하지 않거나 이메일 or 유저네임이 존재하는 에러와 같은 것은
if로 처리했고 에러 발생시 에럼 메지와 함께 return으로 컨트롤러를 종료시켰다.

즉,
1. if문으로 먼저 에러 처리
2. 에러 발생시 에러 설명과 함께 return 하여 함수를 종료
3. if문에 안 걸린 코드는 문제 없는 코드

______________________________________________________________________________________

1. 응답할때 상태코드를 써여 하는 이유
응답할때 상태코드를 써야만 브라우저가 적절한 반응을 할 수 있다.
브라우저가 적절한 반응을 해야만 유저가 편해질 것이다.

예를 들어,
우리가 로그인 할때 브라우저는 자동으로 아이디, pwd를 저장할까요? 라는 반응을 보여준다.
근데 만약 비밀번호 잘못 입력했을때도 브라우저가 이러한 반응을 보이면 유저 입장에서는 난처하다.
그래서 상태코드 400 추가로 보내 뭔가 에러가 발생했음을 브라우저에게 알리고
브라우저가 자동으로 하는 동작(id, pwd 저장)을 유저에게 하지 못하게 한다.

상태코드 4백대는 실패
상캐코드 3백대는 성공을 의미한다.

______________________________________________________________________________________

1. 작업 내용

1) 로그인을 만들었다.

먼저 로그인 라우터에 get, post를 처리하는 컨트롤러를 만들었고
getLogin 컨트롤러는 login.pug를 단순히 렌더링한ㄴ 역할이다.
postLogin 컨트롤러는 유저네임과 패스워드를 받아서 실제로 로그인 하는 역할이다.
(물론, 지금 상태에서는 아직 다 구현하지 못 했다.)

2) login.pug / join.pug
계정이 있다면 로그인 창으로 넘어 갈 수 있도록
계정이 없다면 가입 창으로 넘어 갈 수 있도록 
pug 파일에 a 태그를 넣었다.

______________________________________________________________________________________

1.  Model.findOne(검색조건) vs  Model.findById(id)
검색조건과 일치하는 객체를 리턴한다.
vs
id와 일치하는 객체를 리턴한다.

2. 작업 내용
id가 존재하는지 안 하는지 체크했고
유저가 입력한 pwd와 db에 있는 pwd가 일치하는지 해쉬로 비교했다.

각각의 if문은 id가 존재하지 않을때 비밀번호가 일치않을때 처리하는 제어문이고
이때는 명배한 에러이기에 return으로 함수를 종료시키고 브라우저에게 상태코드와 함께 응답한다.

if문 다음 맨 마지막 코드는 정상인 코드, 즉, 로그인에 성공했을 때 코드이다.

______________________________________________________________________________________

1.  const ok = await bcrypt.compare(password, user.password)

bcrypt.compare(비교해볼 문자열, 해시값, 콜백메소드)

password = 유저가 입력한 비교해 볼 문자열
user.password = DB에 저장된 pwd 해시값

______________________________________________________________________________________

1. 로그인 인증 시스템 = 세션, 세션 id, 쿠키

쿠키와 세션ID 덕분에 로그인을 하지 않아도 서버가 어떤 브라우저가 어떤 브라우저인지 알 수 있다.
브라우저가 처음 백엔드에게 요청을 보내고 백엔드가 응답할때 
백엔드는 각 브라우저에게 "아 너구나!"라고 할 만한 세션 ID를 함께 응답으로 보낸다.
그리고 각 브라우저는 그 세션 ID를 쿠키에 보관한다.

각 브라우저는 다시 그 백엔드에게 요청을 보낼때 쿠키(세션 ID를 포함한)와 함께 요청을 보낸다.
백엔드는 요청과 함께 온 쿠키(세션 ID를 포함한)덕분에 "아 너가 개 였지!"라고 하며 각 브라우저를 기억할 수 있다.

좀 더 정확하게 말하자면 브라우저가 보낸 쿠키에 있는 세션 ID와 세션 DB에 있는 세션 ID를 비교하여
"너가 개구나!" 한다.
 
어쨋든 로그인 하지 않더라도 백엔드는 한 번 방문한 브라우저를 구별 할 수 있다.

2. 세션으로 브라우저와 있었던 일(정보)와 브라우저를 식별한다.
세션은 브라우저와 백엔드 간의 히스토리 or 메모리다.
백엔드와 각 브라우저간의 있었던 일이 이 히스토리와 메모리에 저장된다.

대표적으로 세션에 있는 세션 아이디 덕분에 백엔드가 각 브라우저를 식별할 수 있다.

3. stateless?
와이파이를 생각해보자. 와이파이에 pin 번호를 한 번 입력하면 와이파이와 폰은 계속해서 연결되어 있다.
하지만, 백엔드와 브라우저는 그렇지 않다. 세션 id를 통해서 지속적으로 연결을 확인해야 한다.

3. 작업 설명
세션 미들웨어 => 이 미들웨어가 이 사이트로 들어오는 유저를 기억할 것
세션 미들웨어 => express가 알아서 그 브라우저를 위한 세션 id를 만든다

오페라,엣지,크롬 브라우저를 통해서 
백엔드가 각 브라우저를 식별하고 그 브라우저에 대한 정보를
세션DB에 담는 과정을 학인함.

______________________________________________________________________________________

1. local 오브젝트

pug랑 express가 서로 locals를 공유할 수 있다.
그래서 locals는 이미 모든 pug template에 import된 object다.
그래서 모든 pug에서 같은 locals를 읽을 수 있다
즉, locals는 전역이다.

2. locals 오브젝트 사용법
locals로 변수를 담으면 모든 pug 탬플릿이 그 변수를 접근하고 사용할 수 있다.

그래서 그 locals에 로그인한 사용자를 추가하여
각 pug 템플릿들이 누가 로그인 했는지 알도록 한다.
즉, 누가 로그인 했는지 공유 한다는 말이다.

3. 로컬 미들웨어가 세션 미들웨어 다음으로 와야한다
결국 로그인 시스템에서 로컬 미들웨어는 사용자 정보, 즉, 세션 정보를 다루기에
세션 미들웨어 다음으로 와야한다.

4. 내가 코드를 저장할때마다 session은 사라진다
아직 DB에 세션을 저장하지 않았기 때문에 각 브라우저에 대한 세션 정보는 재시작할때마다 달라진다. 작업 정리

1) userController의 postLogin 컨트롤러에서 어떤 유저가 로그인에 성공했다면 
세션의 loggedIn과 user 정보를 추가한다.

2) 로컬 미들웨어를 만들어 locals 객체에다가 세션 data를 담는다.

3) 그리고 그 locals 객체를 pug 템플릿인 base에다가 사용하였다.


즉, 
1) 세션 미들웨어가 세션을 생성하고
2) 어떤 한 유저가 로그인이 성공하면
세션에 로그인 성공 여부, 유저 네임을 담고
3) 그 세션 정보를 다시 locals 객체에 전달하여
4) pug파일에서도 locals를 이용하여 session 정보를 사용하도록 하였다.

______________________________________________________________________________________

1. 세션을 DB에 저장하자.
세션 ID는 쿠키에 저장되지만 세션 자체는 서버에 저장된다.
그래서 세션을 보존하기 위해서는 세션을 DB에 저장해야 한다.
이러면 서버를 재시작하더라도 세션이 날라가지 않고 기억하게 된다.


이것 덕분에 새로고침 하더라고 로그인 되어있다.
로그인 한 상태에서 같은 브라우저로 접속할 경우 브라우저에 전달된 세션 id와 함께 추가 정보가 들어감
세션은 브라우저가 백엔드를 방문할때 생성된다

import MongoStore from "connect-mongo";을 이용하여 
세션 미들웨어에서
 session({
        secret: "HEllO!",
        resave: false,
        saveUninitialized: false,
        store: MongoStore.create({mongoUrl:"mongodb://127.0.0.1:27017/wetube"})
        => 이 코드를 이용하여 세션을 저장한다.
    })

2. 세션이 DB에 저장되는 과정

1) 브라우저가 내 사이트를 방문하거나 유저가 로그인 할 때 
세션 미들웨어가 세션을 생성.
2) 세션 미들웨어가 세션을 생성하는 과정에서 그 세션을 몽고DB에 저장하도록 설정

______________________________________________________________________________________

1. 익명의 사용자까지 쿠키를 줄 필요가 없다.
아무에게나 세션ID를 넘겨
익명의 사용자 까지 모든 세션을 저장하면 DB 낭비이다.
(그럼.. phub는 익명의 사용자까지 다 db에 기록하는 거네 ㅋㅋ)

2. 유의미한 사용자, 즉, 로그인된 사용자의 세션만 DB에 저장하자

3. session의 옵션을 이용하여 로그인한 사용자만 DB에 저장하는 방법
resave: false,
saveUninitialized: false,


resave =>
모든 request마다 기존에 있던 session에 아무런 변경사항이 없을 시에도
그 session을 다시 저장하는 옵션입니다.

reasve: true =>
세션에 변경사항이 없더라도 session을 다시 저장한다.

reasve: false =>
세션에 변경사항이 있을때 session을 다시 저장한다.

resave: false or ture에 대한 의견 =>
세션에 변경사항이 없는데 다시 저장하는 거는 무의미한 행위이고
익명의 유저에 대한 세션도 DB에 저장되기에 무의미하다.
물론, 익명의 유저에 대한 세션을 DB에 저장 해야만 할 수도 있다.

uninitialized =>
request가 들어오면 해당 request에서
새로 생성된 session에 아무런 작업이 이루어지지 않은 상황을 말합니다.

saveuniniaitlized : true =>
uninitialized 상태에서 세션을 DB에 저장한다.

saveuniniaitlized: false =>
uninitialized 상태에서 세션을 DB에 저장하지 않는다.

saveuniniaitlized: false =>
if during the lifetime of the request the session object isn't modified then, 
at the end of the request and when saveUninitialized is false, 
the (still empty, because unmodified) session object will not be stored in the session store.

The reasoning behind this is that 
this will prevent a lot of empty session objects being stored in the session store. 
Since there's nothing useful to store, the session is "forgotten" at the end of the request.

즉, userController에서 세션을 수정해야지만 몽고 DB에 세션을 저장하겠다는 것읻.
(req.session.loggedIn = true;
req.session.user = user;) => 
userController에서 로그인 되었을 때 세션을 수정하는 코드다.
이렇게 하여 로그인한 유저의 세션만 몽고 DB에 담는다.

______________________________________________________________________________________

Set-Cookie
Set-Cookie 
HTTP 응답 헤더는 
서버에서 사용자 브라우저에 
쿠키를 전송하기 위해 사용됩니다.
https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Set-Cookie

쿠키에 설정가능한 옵션
Domain
현재 쿠키가 어떤 서버로 전송되어져야 
하는지를 지정할 수 있는 속성.
쿠키카 어느 서버에서 왔고 어느 서버로 가는지 지정

Expires: 만료되는 시간 설정
HTTP 타임스템프로 기록된 쿠키의 최대 생존 시간(수명).
session Cookie: 웹브라우저가 켜져있는 동안 유효하고 끄고 다시 켜면 없어짐

Max-Age: 얼마동안 유지할 것 인지 설정
쿠키가 만료될 때 까지의 시간 (밀리세컨드)

secret
이것은 세션 ID 쿠키에 서명하는 데 사용되는 비밀입니다.
tamper = 손대다, (원문의 글귀 등을) 함부로 변경하다 ((with))

Secret used to encrypt and sign session cookies. 
session cookie is signed with this secret to prevent tampering

you can think of the secret as a bit like a password(encrypt key) used to generate the signature
In general, signing is used to confirm that the text originated from the right place. 
Someone might be able to tamper with the text 
but they wouldn't be able to sign it using the correct signature 
because they don't know the secret. 

In the context of cookies the 'origin' for the cookie is the server itself, 
so it just provides a way to confirm that the cookie that comes back is the same one that was sent.

=> 즉 세션 쿠키의 보안을 위해서 secret을 쓴다.
보안 시간에서 배웠듯이 자신의 비밀키로 암호화하면 간접적으로 보내는 사람이 인증된다. 이것이 전자 서명이다.
secret은 이 쿠키를 서버에서 보냈다는 것을 인증함과 동시에 다른 사람이 그 쿠키를 tampering 하지 못하도록 한다.

store: 세션저장소를 지정

COOKIE_SECRET에 넣을 랜덤 문자열 생성 사이트
https://randomkeygen.com/

______________________________________________________________________________________
1. sessino의 옵션인 secret과 store url처럼 외부로 노출되지 말아야 하는 코드는 환경변수를 이용한다.

1) .env 파일을 만든다.
src 외부에 .env 파일은 환경변수 파일이다. 
이 파일에서는 대문자로 작성하는게 규칙이다.
비밀로 해야 할 것을 이 파일에다가 만든다.

COOKIE_SECRET="??????????????????"
DB_URL="mongodb:????????????"

2) 외부로 노출되지 않도록 .gitignore에 .env 파일을 추가한다.
.gitignore에 추가 -> git에 업로드하지않기 위함

3) process.env.####으로 환경 변수를 이용한다.
접근 방법 : process.env.###
(process.env. -> 환경변수)

4) npm i dotenv

5) import "dotenv/config";를 프로그램의 가장 위에 import 한다.
______________________________________________________________________________________

1. git hub로 로그인하기

0) OAuth란?
OAuth는 인터넷 사용자들이 비밀번호를 제공하지 않고 
다른 웹사이트 상의 자신들의 정보에 대해 웹사이트나 애플리케이션의 접근 권한을 부여할 수 있는 
공통적인 수단으로서 사용되는, 접근 위임을 위한 개방형 표준이다

1) Authorizing OAuth Apps?
You can enable other users to authorize your OAuth App.
다른 사용자가 OAuth 앱을 승인하도록 할 수 있습니다.
(GitHub의 OAuth 구현은 
웹 브라우저에 대한 액세스 권한이 없는 앱에 대한 
표준 인증 코드 부여 유형 및 OAuth 2.0 장치 인증 부여를 지원합니다.)

2)깃허브 OAuth Apps Setting
GitHub API를 사용하기 위해 등록한 애플리케이션입니다.
https://github.com/settings/developers
or
https://github.com/settings/applications/new

3) Creating an OAuth App (OAuth앱 만들기)
https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app

4) Web application flow
웹 애플리케이션 흐름: 브라우저에서 실행되는 표준 OAuth 앱에 대해 사용자에게 권한을 부여하는 데 사용됩니다.
앱 사용자에게 권한을 부여하는 웹 애플리케이션 흐름은 다음과 같습니다.
1. 로그인하려는 사이트에서 유저의 GitHub identity를 request하기 위해 유저를 GitHub 페이지로 리다이렉트시킵니다.
2. 유저는 리다이렉트된 GitHub에서 승인을 하고, GitHub에 의해 다시 로그인하려는 사이트로 리다이렉트됩니다.
3. 로그인 하려는 사이트는 유저의 액세스 토큰을 통해 API에 접근합니다.

1. Users are redirected to request their GitHub identity
2. Users are redirected back to your site by GitHub
3. Your app accesses the API with the user's access token
https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps

5) Scopes for OAuth Apps (OAuth 앱의 범위)
scope는 유저에게서 얼마나 많이 정보를 읽어내고 어떤 정보를 가져올 것(access you need)에 대한 것
scope paramter로 이 과정을 수행한다.

Scopes let you specify exactly what type of access you need. 
Scopes limit access for OAuth tokens. 
They do not grant any additional permission beyond that which the user already has

https://docs.github.com/en/developers/apps/building-oauth-apps/scopes-for-oauth-apps


______________________________________________________________________________________
yes=>callback url로 => redirect

URLSearchParams
URLSearchParams 인터페이스는 URL의 쿼리 문자열에 대해 작업할 수 있는 유틸리티 메서드를 정의합니다.
https://developer.mozilla.org/ko/docs/Web/API/URLSearchParams

URLSearchParams.toString()
toString() 은 URLSearchParams 인터페이스의 메소드로서, URL에서 사용할 수 있는 쿼리 문자열을 리턴합니다.
https://developer.mozilla.org/ko/docs/Web/API/URLSearchParams/toString
