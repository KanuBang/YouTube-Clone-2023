1, 절대경로와 상대경로
/edit => /edit
edit => users/edit

2. 폴더로 파일을 분류 할 시에는 파일 경로에 주의하자

3. password 변경 페이지는 socialLogi 사용자가 볼 수 없어야 한다.

________________________________________________________________________
먼저 ES6 문법을 이용하여 form data인 예전 비밀번호, 변경 비밀번호, 변경 비밀번호 확인을 받았다.
req.body로 from data를 backend에서 받기에 from의 input에 name이 필요하고
그 name은 backend에서 동일하게 사용되어야만 form data를 받을 수 있다.
그리고 마찬가지로 _id도 req.session.user로 받았다.

그 다음 _id를 이용해 몽고DB에서 user를 찾았다. => const user = await User.findById(_id)
bcrypt를 이용하여 예전 비밀번호와 몽고 DB에 있는 비밀번호가 일치하는 비교하였다.
=> const ok = bcrypt.compare(oldPassword, user.password)
bcrypt을 이용하기에 해쉬값을 비교하는 것이다.

그 다음 비밀번호를 바꿀 수 없을 때를 if문으로 분류했다.
if문에 해당이 되는 상황이면 비밀번호를 바꿀 수 없기에
곧 받로 현재 컨트롤러를 종료시키고 에러메시지와 함께 현재 페이지를 render 했다.

첫 번째로는 예전 비밀번호와 지금 몽고 DB의 비밀번호가 일치 않았을 때이다.
비밀번호를 바꾸는 사람이 다른 사람이 아님을 확인하기 위하여 넣었다.
두 번째로는 새로운 비밀번호를 잘못 입력하는 것을 방지하기 위함이다.

마지막 코드는 비밀번호 변경 시 발생 될 문제가 없기에 실행되는 코드이다.
여기서 실제로 비밀번호를 업데이트하고 몽고 DB에다가 업데이트된 버전을 저장한다.

그리고 마무리로 logout한다.

로그아웃으로 redirect 하면 logout 컨트롤러에서 세션이 destroy 된다.
세션이 삭제된다는 말이다.
그래서 세션 업데이트가 필요 없다.
왜냐하면, 어차피 지금 세션은 사라지고 나중에 로그인 할 때 
postLogin 컨트롤러에서 비밀번호가 업데이트된 몽고 DB의 데이터로 세션이 생성되기 때문이다.

________________________________________________________________________

먼저 npm i multer을 하여 multer 미들웨어를 설치한다.
multer란 파일 업로드를 위해 사용되는 Node.js 미들웨어이다.

multer을 사용하여 파일을 업로드할 form은 enctpye="multipart/form-data"가 필요하다. (이 form은 multer가 쓰일 거니 다르게 암호화 될 것라는 뜻이다.)
파일을 업로드할 input에는 name이 있어야 backend에서 그 파일을 받을 수 있다.
또한 input에 accpet로 어떤 종류의 파일을 받을 건지 명시한다. ("image/*"란 이미지 파일을 받겠다는 말이다.)

multer을 사용하기 위해서는 당연히 multer 미들웨어에 multer가 import 되어야 한다.
multer 미들웨어에서는 dest를 설정하여 업로드 되는 파일이 서버의 어느 저장소에 저장되는지 알려줘야 한다.
(이 multer 파일 저장소는 gitignore로 commit를 거부한다.)

form에서 파일을 업로드 하여 submit하면 해당 userRouter의 POST가 작동한다.
POST에서는 multer 미들웨어가 실행되고 postEdit 컨트롤러가 실행된다.
먼저, multer 미들웨어가 지정된 서버의 dest에 파일을 저장하고
그 다음에 postEdit 컨트롤러가 실행된다.

postEdit 컨트롤러에서는 user DB를 업데이트 하는데 이때
avatarUrl은 avatarUrl: file ? file.path : avatarUrl, 이런 식으로 update 된다.
즉, User Schema 자체에 avatarUrl은 String으로 타입이 정해져 있기에 파일 주소를 받을 준비가 되어 있고
만약 파일을 업로드하지않고 edit-Profile 했다면 file은 undefined 이기에 
삼항연산자에 따라 avatarUrl=avatarURl 즉, avatarUrl이 유지된다.
반면에, file이 업로드되어 file.path가 있다면 avatarURl=file.path가 되어서
이미지가 업데이트 된다.

여기서 주의할 것은 mongoDB에 저장되는 것은 파일이 아니라 '파일 주소'이다.
파일 원본은 보존되어야 한다.
파일 원본으로부터 복사본이 만들어지는 것은 상관없디만
파일 원본이 수정되면 파일이 변질되는 것이다.
아주 고귀한 이미지 파일이 있다고 해보자 이걸 파일 원본으로 전달하여 파일이 변질되면 얼마나 슬프겠는가

________________________________________________________________________

http://localhost:8081/uploads/30fdf397bf4b3708d631d3bf161a7ee4
브라우저는 url을 통해서 소통한다.
지금 이 url에서 uploads 아직 접근하지 못하기에 브라우저는 이 url을 이해하지 못한다.
그래서 전역 미들웨어로 app.use("/uploads", express.static("uploads"))가 필요하다.
즉, express가 uploads파일을 공개하여 브라우저가 접근할 수 있게 만들어주는 것이다.


/users/edit을 하면 
app.use("/users", userRouter); in server.js
userRouter.route('/edit'); in userRouter.js
그리고 그 다음에 controller가 실행되는 거다.





