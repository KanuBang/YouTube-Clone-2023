1. /가 없다면 상대경로, /가 있다면 절대 경로 경로
a(href="/video/edit")--->localhost:4000/video/edit
a(href="video/edit")--->localhost:4000/videos/video/edit
a(href=`${video.id}/edit`)--->localhost:4000/videos/1/edit

2. http 메소드 get과 post의 차이
get => 단순 정보 요청 / db 수정 의도 없음 => 검색
post => db 업데이트 의도 포함 => 비디오 업로드

3. form의 method 속성
기본 값은 get이다.

4. action은 데이터를 원하는 url로 보낸다
action이 없는 것은 현재 파일 경로를 따라간다


6. ternary operator는 if else문을 간단히 만든다.

______________________________________________________________________

1. app.use(express.urlencoded({extended: true}))
1) express application은 기본 상태에서 HTML의 form을 어떻게 다룰 지 모른다.
2) app.use(express.urlencoded({extended: true}))
을 통해서 express application에게 HTML의 form을 처리하고 싶다고 말한다.
3) 이 미들웨어 덕분에 express application은 HTML의 form을 어떻게 다룰 지 알고 이해하게 된다.
4) express application이 HTML의 form을 이해하고 어떻게 다룰 지 알게 됨으로써
그 form data를 js로 변형시킨다.
5) js로 form data가 변형됬기에 js에서도 개발자가 form data를 사용할 수 있다.

즉, form data를 express application에게 이해시켜주고 그 from을 js로 변형시켜
우리가 js에서 form data를 사용할 수 있게 만들어준다.

2. form을 받을 때는 req.body로 받는다

3. from에 있는 value의 js 표현식을 req.body를 통해서 접근한 것이다.

4. input에 name이 없으면 req.body는 텅 빈 상태이다. input에 꼭 name을 넣자

5. 하나의 url에 get, post 등 다른 요청을 동시에 쓸때는 route를 이용한다.

6. route는 그저 url 경로를 담고 있을 뿐이다.

7. redirect는 우리가 지정한 경로로 브라우저를 이동시킨다.

8. req.params는 url에 있는 변수에 관한 거다. 
그래서 const {id}=req.params가 가능한거다. (es6)

9. 배열 db이기에 재시작하면 모두 초기화 된다.

10. POST 요청은 데이터를 우리의 벡엔드로 보낸다.

11. 몽구스를 통해서 js로 몽고디비로 소통한다.

______________________________________________________________________

1. form에 action이 존재 하지 않는다면 디폴트로 현재 그 폼이 위치한 url로 요청을 보낸다.
2. from에 method가 존재 하지 않는다면 디폴트는 get 요청이다.
3. 즉 form에 action도 method도 존재 하지 않느다면 디폴트는
그 form이 위치한 url로 GET 요청을 보낸 것이다.

4. input에서 name과 req.body의 연관성

1)
form(method="POST" action="/videos/upload")
        input(name = "chanwu", placeholder="Title", required, type="text")
        input(type="submit", value="Upload video")

=> 첫 번째 input에 data를 넣고 submit 하면 input value는 chanwu에 저장된다고 보면된다.
______________________________________________________________________

2)
export const postUpload = (req,res) => {
  const title = req.body.chanwu

  const newVideo = {
    title,
        ......

=> form value의 js 표현식을 req.body로 접근한다.
즉, res.body.chanwu가 input value이다.


______________________________________________________________________

1. 몽고디비는 document-based이다.
일반 DB는 행단위로 데이터를 삽입하고 
sql 베이스라서 규칙성이 보장되는 대신 사용하기 어렵다

하지만, 몽고디비는 document-based이기에 
객체 형태로 데이터(json-like-document)를 저장한다.
그래서 규칙성이 보장되지는 않지만 유연하고 이용하기 쉽다.

물론, quert language도 쓸 수 있다.


2. on vs once과 이벤트 리스닝
이벤트 리스닝: 이벤트 이름과 이벤트 발생 시의 콜백을 연결한다.
on(이벤트명, 콜백) 이벤트 이름과 이벤트 발생 시의 콜백을 연결한다.
once(이벤트명, 콜백) 한 번만 실행되는 이벤트다.

3. 몽구스는 nodejs와 mongodb를 연결한다.

______________________________________________________________________

1. 우리가 JS에서 할 것은 몽구스에게 우리 애플리케이션의 데이터가 어떻게 생겼는지 알려줘야 한다.

즉, db가 알아야 할 데이터가 어떻게 생겼는지 알려준다

우리가 비디오가 어떻게 생겼는지 알려주면 db가 비디오 모델을 만들고 그 모델을 통해서 다양한 작업을 할 수 있다.


2. new mongoose.Schema로 스키마를 정의함 => 데이터가 어떻게 생겼는지 정의함

const videoSchema = new mongoose.Schema({
    title: String,
    description: String,
    createdAt: Date,
    hashtags: [{type: String}],
    meta: {
        views: Number,
        rating: Number,
    }
})

3. mongoose.model("name", schema) 로 스키마로 실제 모델을 만들고 이름까지 붙임.

const Video = mongoose.model("Video", videoSchema)

4. import "./db" 와 import "./models/video"는 파일 자체를 import 하는 것이다.

즉, 지금 server.js에서는
mongoose로 js와 mongodb를 연결하고 커넥션을 생성했다.
그리고 비디오 모델까지 생성했다.

______________________________________________________________________________________

1. server.js에는 server와 관련된 것만 넣는다.
2. callback이란 무언가가 발생하고 난 다음(then) 호출되는 함수이다

3. Video.find({}, (error, videos) => {});
몽구스가 Video.find({}) db에 요청한다. (몽구스가 db에 전체검색 요청)
그리고 db가 응답하면 콜백을 실행한다 (db가 몽구스에게 응답)
몽구스는 err과 vdeo의 값을 콜백 (db가 응답한 것을 몽구스가 error와 함께 콜백에 전달)

몽구스가 db에게 전체 검색을 요청
-> db가 응답
-> db가 응답한 것을 error와 함께 콜백에 넣어줌
-> 우리는 콜백에 온 정보로 data를 관리함

즉, find를 실행시키고 
=> 모든 값을 검색하고 ( { } 모든 값)
=> 콜백에 err과 vidoes를 불러왔다

4. 중요한 거는 비동기이다.
export const home = (req, res) => {
  console.log("Start");
  Video.find({}, (error, videos) => {
    console.log("Finished");
    console.log(error)
    console.log(videos)
    return res.render("home", { pageTitle: "Home", videos });
  });
  console.log("I finish first");
}
의 결과는 

Start
I finish first
Finished
null
[]

이다. 순차적으로 실행되지 않았다.
즉, 콜백은 무언가 일어난 다음 실행 되는 함수이기에 순차적으로 실행되지 않는다.

좀 더 살펴보면
몽구스가 error와 videos를 콜백에 줬는데
값을 보니 error은 null, 즉, 에러는 없었다
그리고 videos는  [] 이다. 모델만 정의 했으니까 당연한 거다.

______________________________________________________________________________________

0. 콜백의 단점
콜백은 무언가 실행되고 난 다음(then) 실행된다.
그래서 코드가 top to bottom이 아니라 뒤죽박죽 진행된다.
이 점이 개발자들을 혼란스럽게 한다.

1. async,await의 장점
async, await도 콜백의 단점을 해결한다.
콜백에서는 무언가가 실행되고 완료될 때까지 기다리지 않고
다른 코드가 실행되지만

async, await은 무언가가 실행되고 완료될 때까지 기다리고
끝난 다음에 다음 코드가 실행된다.

즉, callback의 기능을 하지만 코드가 순차적으로 진행되기에 혼동이 적다.

2. async, await의 장점

콜백은 그 대신에 error을 인수로 받는다.
async는 error를 인수로 받지 않기에
try-catch문으로 에러 처리를 해야 한다.


3. return은 그저 함수를 끝내는 기능. function에 주의를 기울이자.
res.end가 함수를 끝내는게 아니다. 이거는 그저 응답을 끝내는 거다.
함수를 끝내는 것은 return이다.

실질적으로 요청과 응답을 처리하는 것은 express의 req, res의 메소드이고
함수를 끝내는 것은 return 이기에

function에 주의를 기울이자

4. 1가지 요청에 응답을 2번 보내지 말자.
export const home = async (req, res) => {
    console.log("start")
    const videos = await Video.find({});
    console.log("finished")
    res.send("fuck")
    return res.render("home", {pageTitle:"HOME", videos})
}

하면 Cannot set headers after they are sent to the client 에러가 뜬다.
res.send("fuck")으로 응답했는데 왜 또 응답하냐 이거다.

이걸 반대로 다음과 같이 순서만 바꾼다면
  return res.render("home", {pageTitle:"HOME", videos})
   res.send("fuck")

에러가 뜨지 않는다. 왜냐? return으로 함수가 종료되었기 때문이다.

______________________________________________________________________________________

1. req.body로 form data를 받고  new Video({ })로 데이터를 생성한다.

export const postUpload = (req,res) => {
  const {title, description, hashtags} = req.body
  const video = new Video({
    title,
    description,
    createdAt: Date.now(),
    hashtags: hashtags.split(",").map((word) => `#${word}`),
    meta: {
      views: 0,
      rating: 0,
    }
  });
  
  return res.redirect("/")
}

1) upload.pug에서 form에 데이터를 입력하면 http://localhost:8081/videos/upload로 POST 요청이 간다.
2) 그 다음 postUpload 컨트롤러가 실행된다.
3) postUpload는 form의 input value를 req.body로 접근한다.
4) new Video로 json-like-document data를 생성하고 req.body에서 얻은 데이터를 넣는다.

2. Array.split은 spliiter or separator로 string을 분리하여 새로운 배열을 만든다.

3. Array.map() 메소드는 콜백 함수를 이용해 각각의 요소에 호출해서 그 값을 변환하여 배열을만든다.

4. 즉 split은 string을 separator로 쪼개서 새로운 배열을 만들고
map은 배열의 요소에 차례 차례 접근해 값을 변환하여 변환된 배열을 만든다.

5. mongoose가 자동으로 data에 id를 부여한다.


______________________________________________________________________________________

1. 몽구스는 우리가 입력한 데이터 정보를 바탕으로 데이터 유효성 검사를 실행해준다.

2. 만약 String으로 지정한 것에 Number을 집어 넣으면 그 Numbre는 String으로 바뀐다.
'몽구스'에 의해서

3. 우리가 정한 데이터 타입과 다른 데이터가 입력되면
에러를 띄우고 서버를 중단시킨다. '몽구스'에 의해서

4. collection은 document의 집합이다.


5. await Video.create과 new Video({})와 video.save()를 동시에 대체한다.

  const {title, description, hashtags} = req.body
  await Video.create({
    title,
    description,
    //createdAt:"asdfsadf",
    createdAt: Date.now(),
    hashtags: hashtags.split(",").map((word) => `#${word}`),
    meta: {
      views: 0,
      rating: 0,
    }
  })

  이 코드가 다음 코드를 대체 했다.

    const video = new Video({
    title,
    description,
    createdAt: Date.now(),
    hashtags: hashtags.split(",").map((word) => `#${word}`),
    meta: {
      views: 0,
      rating: 0,
    }

    video.save()
  });

  즉, create는 데이터를 만듬과 동시에 db에 저장한다.


6. video.create에 await async를 한 이유는 데이터를 만들고 db에 저장하는데 까지 기다리겠다는 의미다.

7. help를 통해서 wetube같은 db를 탐험할 수 있다.