1. SassyCSS란 무엇인가?
SassyCSS는 기존의 css에서 기능을 확장하고 개선하기 위한 전처리기이다.
scss를 사용함으로써 변수, 믹스인, 중첩 등의 확장 기능을 사용하여 css의 유지 보수를 더 효율적으로 처리한다.

2. sass-loader는 무엇인가?
scss 파일을 가져와 sass 컴파일러를 사용하여 css로 변환한다.

3. css-loader는 무엇인가?
css 파일을 js 모듈로 변환하는 역할을 한다.
css 파일을 가져와서 'import' 또는 'url'로 참조되는 다른 파일과 함께 로드하고, css를 js 모듈로 변환한다.

4. style-loader는 무엇인가?
js 모듈로 변환된 css를 HTML에 삽입한다.
즉, js 모듈로 변환된 css를 동적으로 생성하여 <style> 태그를 생성하고,
이를 HTML에 삽입한다. 이렇게 함으로써 css 파일을 로드하는 대신,
HTML에 바로 스타일을 적용할 수 있다.

5. style-loader,css-loader, sass-loader는 왜 쓰는가?
가장 중요한 목적은 브라우저가 이해할 수 있는 js 코드로 변환하여 단일 파일을 만드는 것이다. 즉, 모듈 번들링이다.
그리고 앞서 말했듯이 css를 좀 더 편리하게 유지 보수하기 위해 scss를 사용했다.
scss를 바로 브라우저가 알아 먹을 수 있는 js 코드로 변환하면 좋겠지만 불가능하다.
scss가 정규 css로 변형되고 그 정규 css가 브라우저가 알아먹은 js로 변환되어 HTML에 삽입된다. 
이 과정을 거치면 css가 웹에 적용된다.
과정이 이렇기에 scss를 정규 css로 컴파일 해주는 sass-loader가 필요한 거다.
css-loader도 마찬가지로 css를 브라우저가 알아 먹을 수 있는 js로 변환하기 위해 필요한 것이다.
마지막으로 style-loader는 js로 모듈로 변환된 css를 직접적으로 html에 삽입하여 css를 웹에 적용시킨다.

6. 결국 5번을 함으로써 얻는 장점은 무엇인가?
장점1: scss를 통한 더 편리한 css 유지보수 가능
장점2: css 파일을 로드 할 필요 없이 js로 변환 css 모듈을 html에 삽입하여 스타일을 적용한다.

즉, webpack의 목적인 모듈 번들링을 함으로써 파일 로드 시간을 줄여 웹 어플리케이션 성능을 향상시켰고
더 진보된 기술인 scss 같은 것을 사용하여 css를 더 효율적으로 다루었다.

7. 순서에 주의하자
test: /\.scss$/,
use: ["style-loader", "css-loader", "sass-loader"],
로더는 배열에 적힌 순서 반대로 실행된다. 그래서 이 순서대로 코딩한 것.

8. 과정 정리
1) scss로 변수 파일을 만들고
2) 그 변수 파일을 styles.css 파일에다가 import 한다.
3) 그리고 그 styles.css를 main.js(client 폴더에 있는)에 import 한다.
4) ./src/client/js/main.js를 엔트리 포인트로 시작하여 
의존관계 있는 js모듈까지 합쳐 단일 js 파일을 만드는 모듈 번들링을 시도한다.
5) 최신 js 코드는 babel-loader로 브라우저가 알아먹은 js로 바뀐다.
6) scss는 sass-loader, css-loader, style-loder를 적용하여 js 모듈화된 css를 만든다
7) 그리고 그 최종 결과물을 assets 폴더의 main.js라는 이름으로 만든다. 
8) server.js에서 그 assets 폴더를 공개하고
9) 그 모듈 번들링된 main.js base.pug(HTML)에 script으로 연결시킨다.
10) style-loader 덕분에 js 모듈이 html 헤더에 style 태그로 삽입된다
11) HTML에 css가 적용됬다.

________________________________________________________________________
1. 플러그인이란?
소프트웨어에 추가 기능을 제공하는 소프트웨어 컴포넌트다.
프로그램에 라이브러리를 로드하여 어떤 특정 기능을 수행하는 코드를 제공한다.

2.mini-css-extract-plugin이란?
webpack(software)에서 사용되는 플러그인 중 하나로, css 파일을 별도 추출하여 번들 파일로부터 분리시켜준다.

3.mini-css-extract-plugin은 왜 쓰는가?
대부분의 웹사이트에서 css는 각각의 페이지에 공통적으로 사용된다.
그래서 번들 파일에서 css 별도 파일로 분리시키는 편이 파일 로드 속도 향상에 기여할 수 있다.
왜냐하면, css가 로드되냐 안 되냐에 따라서 모듈 번들링 파일의 크기가 너무 급격하게 변하기 때문이다.

4. 최종 정리
정리하자면, 모듈 번들링은 수십 개의 파일을 로드할 바에 수십 개의 파일을 합친 번들 파일을 로드하여
파일 로드 시간을 줄여 웹 애플리케이션의 성능을 향상시키겠다는 말이다. 
하지만, css 코드 같이 중복되고 js 모듈로 변환시 사이즈가 급격하게 커지는 모듈은 
차라리 따로 별도 파일로 분리하여 로드하는 편이 파일 로드 시간을 단축시키기도 한다.

mini-css-extract-plugin은 플러그인으로서 프로그램에 라이브러리로 로드되어 webpack에 이 추가 기능을 제공한다.

________________________________________________________________________
  plugins: [
      new MiniCssExtractPlugin({
        filename:"css/styles.css"
      })
    ],

=> 번들 파일로부터 추출된 css 파일에 대한 설정을 지정한다.
=> filename 옵션을 이용해 생성된 css 파일의 이름과 경로를 설정했다.

________________________________________________________________________

제발 저장좀 해라. 지금 저장 안 해서 시간 날린게 몇번이냐.
