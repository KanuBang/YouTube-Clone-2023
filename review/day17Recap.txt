"mini-css-MiniCss-ExtractPlugin 플러그인에 대하여"

플러그인이란 프로그램에 라이브러리나 모듈로 형태로 로드되어 소프트웨어에 특정 기능을 제공하는 소프트웨어 컴포넌트다.
MiniCssExtractPlugin은 번들 파일로부터 css를 별도로 분리시키는 플러그인이다. 그런데 이상하다. 번들 파일을 만든 이유는 
로드하는 파일 수를 줄여 파일 로드 속도를 향상시키기 위함이다. 그런데 MiniCssExtractPlugin으로 역으로 css 파일을 분리하여 
번들 파일을 만든 목적을 지키지 않는데 이것이 어째서 소프트웨어의 기능을 향상시키는 플러그인이라는 것인가?
답은 css의 특성이다. 각 웹페이지에 적용되는 css는 왠만해서 다 같다. 네이버 스포츠 축구를 가든 야구를 가든 css는 같다.
즉, 각 웹페이지에 중복되어 반복되는 css 코드가 사용된다는 말이다. 그리고 더 문제는 이 css 코드가 js 모듈화되면 코드의 양이 굉장히
방대해진다. 이것은 파일 사이즈를 늘려 로드 속도를 느리게 만든다.

그래서 어차피 css는 각 웹페이지에 같게 적용되니 MiniCssExtractPlugin를 이용하여
css 파일을 따로 로드하고 번들 파일의 크기를 줄여 로드 속도를 향상시키겠다는 목적이다.

________________________________________________________________________

"webpack의 watch 모드란"
webpack에서 watch 모드를 사용하면 파일 변경 사항을 감지하여 자동으로 빌드할 수 있다.
또한 watch 모드를 사용하면 개발자는 코드의 변화를 실시간으로 확인할 수 있다.

이거 덕분에 webpack에 관련된 코드를 저장할때마다 자동으로 
npm run dev:assets -> webpack -> webpack.config.js -> 모듈 번들링
이 자동으로 실행된다.

=> 콘솔 창으로 2개로 분리하여 사용하자.
webpack, node 콘솔 창으로 분리하자

"webpack에서 output 설정에서 claen 옵션을 사용하는 이유"
일반적으로 웹팩은 소스 코드의 변화가 있을 때 마다 빌드를 수행하며, 이전 빌드에서 생성된 
결과물을 새로운 결과물로 업데이트 한다. 이렇게 되면 이전 빌드의 결과물과 새로운 결과물이 혼합되는
혼란스러운 결과가 발생한다. 이를 방지하기 위해 clean 옵션을 사용하여, 새로운 빌드를 수행하기 전 
이전 빌드에서 생성된 결과물을 자동으로 삭제한다. 이렇게 되면 이전 결과물과 새로운 결과물이 혼합되는 문제를 
방지할 수 있으며, 빌드 결과물을 깔끔하게 유지할 수 있다.

"nodemon, nodemon.json, ignore, ,exec을 쓰는 이유"
nodemon은 NodeJS app을 개발할 때 소스 코드의 변화를 감지하고, 자동으로 서버를 재시작하는 유용한 도구이다.
nodemon.json은 이 nodemon 도구를 더욱 유연하게 사용할 수 있도록 해주는 설정 파일이다.
nodemon.json은 주로 서버 환경 설정 정보나 nodemon의 동작 방식에 대한 옵션을 지정할때 이용된다.
특히, nodemon.json 파일의 ignore을 속성은 nodemon 도구가 파일 변경 감지를 무시하도록 지정하는데 사용됩니다.
즉, ignore 속성에 지정된 파일 또는 디렉토리는 파일 변경 감지를 하지 않고, nodemon 도구에 의해 무시 당한다.

{
  "ignore": [
    "node_modules/*",
    ".git/*"
  ]
}

이러면 node_modules 디렉토리와 .git 디렉토리를 파일 변경 감지에서 제외합니다.
이를 통해, 개발자가 작성한 코드만을 대상으로 파일 변경 감지를 수행하게 되어, 보다 효율적으로 개발할 수 있습니다.

또한, nodemon.json 파일에서 exec 속성은 실행할 명령어를 지정하는 속성이다.
exec 속성은 다양한 명령어를 실행할 수 있다. 예를 들어, nodemon과 함께 babel-node를 사용하여
ES6 모듈을 실행할 수 있다.

 ""dev:server": "nodemon","dev:assets": "webpack"의 의미와 과정"
 
 npm run dev:server을 하면 nodemon은 nodemon.json을 찾게 되어 있다.
 그리고 nodemon.json은 nodemon을 더 유용하게 사용하게 해주는 설정 파일이다.
 이 설정 파일에 따라 소스 코드의 변화를 감지하고, 자동으로 서버를 재시작한다.
좀 더 구체적으로 들어가자면, nodemon.json에는 다음과 같은 코드가 있다.
{
    "ignore": ["webpack.config.js", "src/client/*", "assets/*"],
    "exec": "babel-node src/init.js"
}

ignore로 지적된 디렉토리 또는 파일에서 저장을 하더라도 exec가 실행되지 않는다.
반면, igonre에 지정되지 않은 파일 또는 디렉토리에서 저장을 하면 exec에 지정된 명령어가 실행된다.
그 명령어는 init.js를 실행하고 babel-node로 es6 까지 사용하겠다는 뜻이다.

 npm run dev:assets을 하면 webpack은 webpack.config.js를 찾게 되어 있다.
그리고 webpack 설정 파일에 따라 모듈 번들링을 시도한다.