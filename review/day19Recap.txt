1. fullScreen 작업 용어

document.fullScreenElement
: 현재 문서가 전체화면에서 실행 중일 경우 해당 요소를 반환하는 속성이다.
현재 문서가 전체화면이 아니라면 null을 반환한다.

document.exitFullscreen
: 이 메소드를 호출하면 전체화면에서 빠져나와 원래 화면 크기와 배치로 돌아간다.

requestFullscreen()
: 웹 페이지의 요소를 전체 화면 모드로 실행하는 데 사용한다.

2. fullScreen 공통 논리

1) fullScreenBtn에 click이벤트를 연결하고 콜백으로 handleFullscreen을 연결한다
2) handleFullscreen 에서 전체화면인 html 요소를 가져오기 위하여
const fullscreen = document.fullscreenElement;을 이용한다.
만약 전체화면인 요소가 없다면 fullScreen은 null이다.

3. fullscreen에서 원래 화면으로 되돌리는 논리
1) fullScreen이 null이 아니라면 if문으로 간다. (fullScreen인 것이 있다)
2) if문 안에서는 fullScreenBtn을 눌러 fullScreen에서 원래 화면으로 되돌린다.
즉,
fullscreen상태 => btn 클릭 => 원래 화면으로 되돌아감(document.exitFullscreen();)
=> btn text = "Enter Full Screen";

4. 원래 화면에서 fullScreen으로 되돌리는 논리
1) fullscreen인 요소가 없기에 fullScreen은 null이다.
2) else로 간다.
3) videoContainer.requestFullscreen()로
웹 페이지의 요소를 전체 화면 모드로 실행하도록 만든다.

_______________________________________________________________

1. Controls Events 기본 용어
mousemove 이벤트: 마우스 포인터가 요소 내에서 움직일때 발생한다.
mouseleave 이벤트: 마우스 포인터가 요소를 벗어날때 발생한다.
setTimeout 함수:
clearTimeout 함수:

2. "마우스 포인터가 요소 내에서 움직일때" 논리
1) 비디오 요소 안에서 마우스 포인터가 요소가 움직일때 
콜백으로 등록된 handleMouseMove가 작동

2) 첫 번째에는 controlsTimeout, controlsMovementTimeout이 null이기에
모든 if문이 씹힘

3) 그리고 videoControls id를 가진 요소에 showing css class가 추가됨

4) 그리고 3초가 지나면 다시 hideControls()를 이용하여 
videoControls에 showing css class를 제거함.

3. "마우스 포인터가 비디오 요소를 떠났을때" 논리
만약 마우스 포인터가 벗어난 상태에서 3초가 지나면
비디오 바를 감춘다.

4. 왜 이렇게 하는 가?
마우스가 비디오 요소 안에서 움직이면 비디오 바를 보여주고 3초동안 마우스의 움직이 없으면 비디오 바를 감춘다.
또한, 마우스가 비디오를 벗어나고 3초가 지나면 비디오 바를 감춘다.

5. controlsMovementTimeout, controlsTimeout의 의미?

controlsMovementTimeout은 비디오 안에서의 setTimeout의 id를 담고
controlsTimeout은 비디오 밖에서의 setTimeout의 id를 담는다.

6. 
   
const handleMouseMove = () => {
    if(controlsTimeout) {
        clearTimeout(controlsTimeout);
        controlsTimeout = null;
    }

    if(controlsMovementTimeout) {
        clearTimeout(controlsMovementTimeout)
        controlsMovementTimeout = null
    }

    videoControls.classList.add("showing")
    controlsMovementTimeout = setTimeout(hideControls, 3000)
}

const handleMouseLeave = () => {
    controlsTimeout = setTimeout(hideControls, 3000)
}

마우스가 비디오 요소안에서 움직일때마다 handleMouseMove가 재실행된다.
그리고 비디오 요소안에서 마우스가 3초 동안 움직이지 않으면 그대로 handleMouseMove의 코드가 진행되어
비디오 바를 보여주고 3초후에 그 비디오 바가 사라진다.

마우스가 비디오 밖에서 움직일때마다 handleMouseLeave가 재실행된다.
그리고 비디오 요소 밖에서 마우스가 3초 동안 움직이지 않으면 setTimeout이 실행되어
비디오 바가 사라진다.

ex)
마우스가 비디오를 떠난 상태에서 움직이지 않고 3초가 지남. 
=> hideControls가 실행됨.
=> 비디오 바가 제거됨
=> 그 setTimeout의 id는 controlsTimeout에 저장.
=> 그리고 마우스 포인터가 다시 비디오 내로 들어오면
=> if(controlsTimeout)로 들어가
=> setTimeout id를 삭제하고 controlsTimeout = 0으로 초기화

clearTimeout 하는 이유?
setTimeout을 재사용 하기 위함이다.
그 이유는 setTimeout은 딱 1번만 임무를 수행하면 끝이기 때문이다.
그래서 setTimeout의 id를 clearTimeout으로 삭제하고 
다시 임무를 수행할 수 있도록 해줘야 한다.

나무젓가락 같은 느낌이다. 한 번 쓰면 다시는 못 쓰기에 없애고 새로운 것을 써야 한다.


